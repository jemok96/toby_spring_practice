관심사의 분리:
관심이 같은 것끼리는 하나의 객체 안으로 또는 친한 객체로 모이게하고,
관심이 다른 것은 가능한 한 따로 떨어져서 서로 영향을 주지 않도록 분리하는 것

리팩토링:
기존의 코드를 외북의 동작방시게는 변화 없이 내부 구조를 변경해서 재구성하는 작업
=>변화에 효율적으로 대응하고, 유지보수가 용이해짐

결합도: 하나의 오브젝트가 변경이 일어날 때 관계를 맺고 있는 다른 오브젝트에게 변화를 요구하는 정도


스프링의 IOC기능의 대표적인 동작원리는 주로 의존관계 주입이라고 불린다
IOC컨테이너 또는 DI컨테이너(더 많이 불린다)
DI는 오브젝트 레퍼런스를 외부로부터 제공(주입) 받고 이를 통해 여타 오브젝트와 다이내믹하게
의존관계가 만들어지는 것이 핵심이다.

의존
의존관계에는 방향성이있다.
A가 B를 의존할 경우  A->B이고  B가 변할 경우 A에 영향을 미친다.

의존관계 주입은 세 가지 조건을 충족
1.코드에는 런타임 시점의 의존관계가 드러나지 않는다. 그러기 위해서는 인터페이스에만 의존하고 있어야한다.(다형성)
2.런타임 시점의 의존관계는 컨테이너나 팩토리 같은 제3의 존재가 결정한다.
3.의존관계는 사용할 오브젝트에 대한 레퍼런스를 외부에서 제공해줌으로써 만들어진다.



제어의 역전
오브젝트가 능동적으로 자신이 사용할 클래스를 결정하고
언제 그 오브젝트를 만들지 스스로 결정한다.결정권이 자신에게 있다. => 제어의 역전X
ex) UserDao dao = new UserDao()

제어의 역전에서는 자신이 사용할 오브젝트를 생성하지도, 선택하지도 않늗다
ex) userDao dao = 외부파일설정
외부파일로 주입받을 객체를 가져왔다면
사용하는 측에서 어떤 객체가 생성되어 주입되었는지 알 수 없다.생성과 주입의 제어권이 다른쪽으로 넘어간 상황
이것이 제어의 역전이다. 결국 역할을 나눈 것

Bean
스프링 컨테이너가 생성, 관계설정, 사용 등을 제어해주는 제어의 역전이 적용된 오브젝트를 가리킨다
모든 오브젝트가 Bean이 아니다.

BeanFactory:
스프링의 IoC를 담당하는 핵심 컨테이너를 가리킨다. 빈을 등록하고, 생성하고,조회하고 돌려주고
보통 이를 바로 사용하지 않고 확장된 ApplicationContext를 사용한다

Application Context(스프링 컨테이너):
BeanFactory를 확장한 개념,BeanFactory 기능을 모두 상속받아서 제공한다
환경변수,애플리케이션 이벤트 등 여러 부가적인 기능이 추가 됨
이 때 Bean들은 싱글톤으로 관리된다.


ApplicationContext는 여러 구현체가 있는데
@Configuration이 붙은 자바 코드를 설정정보로 사용하려면
AnnotationConfigApplicationContext 사용


UserDao (사용)-> <<interface>> ConnectionMaker   <- DConnectionMaker(구현체)
이 경우 ConnectionMaker가 변할 경우 UserDao가 영향을 받지만
DConnectionMaker에 변화가 생겨도 UserDao에 영향을 주지 않는다.
이렇게 인터페이스에 대해서만 의존관계를 만들어두면 구현체와 관계가 느슨해지면 변화에 영향을 덜 받는다

만약 인터페이스가 없을 경우 UserDao가 직접 구현체를 주입 받아사용 하게 되면
구현체 내부 메서드에서 로직에 변화가 일어난다면 UserDao에서도 변화가일어남
근데
인터페이스를 두고 관계를 느슨하게 하면 구현체가 수정되어도
사용하는 입장에서는 달라질게 없음, 가령 DB연결 방식을 바꿨다 쳐도 UserDao에서는 변화가 없음,개발환경의 DB -> 실제 배포 DB 변경할 떄도 생각해보면 편함, 변경점의 분리
확장도 유리